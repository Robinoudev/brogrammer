# Set prefix to space.
set-option -g prefix C-b

# Bindings:
# - to see current bindings:
#   tmux list-keys

# Open new/split panes with the path of the current pane.
unbind-key c
bind-key c new-window -c '#{pane_current_path}'
unbind-key %
bind-key % split-window -h -c '#{pane_current_path}'
unbind-key '"'
bind-key '"' split-window -v -c '#{pane_current_path}'

# Vim-like key bindings for pane navigation (default uses cursor keys).
unbind-key h
bind-key h select-pane -L
unbind-key j
bind-key j select-pane -D
unbind-key k
bind-key k select-pane -U
unbind-key l # normally used for last-window
bind-key l select-pane -R

# Resizing (mouse also works).
unbind-key Left
bind-key -r Left resize-pane -L 5
unbind-key Right
bind-key -r Right resize-pane -R 5
unbind-key Down
bind-key -r Down resize-pane -D 5
unbind-key Up
bind-key -r Up resize-pane -U 5

# Fast toggle between current and last-used window (normally prefix-l).
bind-key ^space last-window

# `^space ^space` is awfully close to the destructive `^space space`, which
# trashes the layout. Providea quick way to get back to the previous-used
# layout.
#
# Normally used for previous-window, but I never use that, prefering numeric
# access.
bind-key p select-layout -o

# Intuitive window-splitting keys.
bind-key | split-window -h -c '#{pane_current_path}' # normally prefix-%
bind-key '\' split-window -h -c '#{pane_current_path}' # normally prefix-%
bind-key - split-window -v -c '#{pane_current_path}' # normally prefix-"

bind-key -r '<' swap-window -d -t '{previous}' # Move window left.
bind-key -r '>' swap-window -d -t '{next}' # Move window right.

# Status bar.
set-option -g status-style 'bg=#373b41,fg=white,bold,italics'
set-option -g status-left-length 40
set-option -g status-left '#[fg=yellow,bold,italics]#S ยง ' # SECTION SIGN (UTF-8: c2 a7)
set-option -g status-right "#[fg=yellow,bold,italics]$USER@#h #[fg=magenta]%l:%M %p"
set-option -g status-interval 60 # Default is 15.

# Automatically renumber window numbers on closing a pane (tmux >= 1.7).
set-option -g renumber-windows on

# Highlight active window.
set-option -w -g window-status-current-style bg=red

set-option -w -g xterm-keys on

# Mouse can be used to select panes, select windows (by clicking on the status
# bar), resize panes. For default bindings see `tmux list-keys`.
set-option -g mouse on

# Stay in copy mode on drag end.
# (Would use `bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X
# stop-selection` but it is a bit glitchy.)
unbind-key -T copy-mode-vi MouseDragEnd1Pane

# Scroll 3 lines at a time instead of default 5; don't extend dragged selections.
bind-key -T copy-mode-vi WheelUpPane select-pane\; send-keys -t'{mouse}' -X clear-selection\; send-keys -t'{mouse}' -X -N 3 scroll-up
bind-key -T copy-mode-vi WheelDownPane select-pane\; send-keys -t'{mouse}' -X clear-selection\; send-keys -t'{mouse}' -X -N 3 scroll-down

# Make double and triple click work outside of copy mode (already works inside it with default bindings).
bind-key -T root DoubleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' "send-keys -M" "copy-mode -t'{mouse}'; send-keys -t'{mouse}' -X select-word"
bind-key -T root TripleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' "send-keys -M" "copy-mode -t'{mouse}'; send-keys -t'{mouse}' -X select-line"

# Don't exit copy mode on double or triple click.
bind-key -T copy-mode-vi DoubleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' "send-keys -M" "copy-mode -t'{mouse}'; send-keys -t'{mouse}' -X select-word"
bind-key -T copy-mode-vi TripleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' "send-keys -M" "copy-mode -t'{mouse}'; send-keys -t'{mouse}' -X select-line"

# For those times when C-c and q are not enough.
bind-key -T copy-mode-vi Escape send-keys -X cancel

# Slightly more useful width in "main-vertical" layout; enough room for 3-digit
# line number gutter in Vim + 80 columns of text + 1 column breathing room
# (default looks to be about 79).
set-option -w -g main-pane-width 85

set-option -g default-terminal "tmux-256color"
set-option -ga terminal-overrides ',xterm-256color:Tc'

set-option -g history-limit 10000

# Start window and pane numbering at 1, (0 is too hard to reach).
set-option -g base-index 1
set-option -g pane-base-index 1

# Don't wait for an escape sequence after seeing C-Space.
set-option -s escape-time 0

# Dynamically update iTerm tab and window titles.
set-option -g set-titles on

# Needed as on tmux 1.9 and up (defaults to off).
# Added in tmux commit c7a121cfc0137c907b7bfb.
set-option -g focus-events on

# But don't change tmux's own window titles.
set-option -w -g automatic-rename off

# Don't wrap searches; it's super confusing given tmux's reverse-ordering of
# position info in copy mode.
set-option -w -g wrap-search off

# - #S = session name
# - #T = pane title (~/.zshrc sets this to the last/current command)
set-option -g set-titles-string "#S > #T"

# Show bells in window titles.
set-option -g window-status-bell-style fg=yellow,bold,underscore

# Turn off distracting border highlight.
set-option -ga pane-active-border-style bg=default,fg=default

# Add : to the default list (" -_@") of word separators.
set-option -ga word-separators :/

# Make sure we always start at 1, even when invoked from a .tmux wrapper script.
set-environment -g SHLVL 1

# Clipper.
# bind-key y run-shell "tmux save-buffer - | nc -U ~/.clipper.sock"

# begin selection in vi mode
bind-key -T copy-mode-vi v send-keys -X begin-selection

# "copy-pipe" requires tmux >= 1.8
# bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "nc -U ~/.clipper.sock"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'

# Search back to last prompt (mnemonic: "[b]ack").
bind-key b copy-mode\; send-keys -X start-of-line\; send-keys -X search-backward "โฏ"\; send-keys -X next-word

bind-key -T copy-mode-vi / command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""

# Analagous with naked C-l which resets/clears the terminal.
bind-key C-l clear-history

source-file -q ~/.tmux-local.conf

# unbind C-b
# set-option -g prefix C-a
# bind-key C-a send-prefix

# set -g base-index 1

# set-window-option -g mode-keys vi
# bind-key -T copy-mode-vi v send-keys -X begin-selection
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'

# # vim-like pane switching
# bind -r k select-pane -U
# bind -r j select-pane -D
# bind -r h select-pane -L
# bind -r l select-pane -R

# set-option -sg escape-time 0
# set-option -g focus-events on
# set-option -sa terminal-overrides ',xterm-kitty:RGB'
# # set -g terminal-overrides 'xterm*:smcup@:rmcup@'
# # set -g default-terminal screen-256color
# # set -g terminal-overrides ",alacritty:RGB"
# set-option -ga terminal-overrides ',$TERM:Tc,*:Ss=\E[%p1%d q:Se=\E[2 q'
# set-option -ga terminal-overrides ",$TERM:Tc"
# set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'

### use C-a, since it's on the home row and easier to hit than C-b
#  set-option -g prefix C-b
#  unbind-key C-b
#  bind-key C-b send-prefix
#  set -g base-index 1
## Easy config reload
#  bind-key R source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."
## edit tmux.conf or tmux-status
#  bind E new-window -n 'tmux.conf' 'nvim ~/.dotfiles/tmux.conf && tmux source ~/.tmux.conf && tmux display "~/.tmux.conf sourced"'
#  bind S new-window -c 'tmux-status.conf' 'nvim ~/.config/tmux/tmux-status.conf && tmux source ~/.tmux.conf && tmux display "~/.tmux.conf sourced"'
## edit vimrc
#  bind V new-window -n 'vimrc' 'nvim ~/.dotfiles/vimrc'
#  bind N new-window -n 'nimrc' 'cd ~/.config/nvim  && nvim init.vim'
## edit zshrc
#  bind Z new-window -n 'zshrc' 'nvim ~/.dotfiles/zshrc && source ~/.zshrc && tmux desplay ".zshrc updated"'
## edit hammerspoon
#  bind H new-window -n 'init.lua' 'nvim ~/.dotfiles/hammerspoon/init.lua'


## vi is good
#  setw -g mode-keys vi
#  # set -g status-keys vi
#  # set -g default-terminal "xterm-kitty"

#  set -g default-terminal $TERM
#  # set-option -ga terminal-overrides ',$TERM:Tc,*:Ss=\E[%p1%d q:Se=\E[2 q'
#  set-option -ga terminal-overrides ",$TERM:Tc"
#  set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'

#  set -g focus-events on
#  set -sg escape-time 0
## mouse behavior
#  set-option -g -q mouse on
#  # set -g mouse-select-pane on
#  # set -g mouse-resize-pane on


#  bind-key : command-prompt
#  bind-key r refresh-client
#  bind-key L clear-history
#  bind-key Q set -g status

#  bind-key space next-window
#  bind-key bspace previous-window
#  bind-key enter next-layout

## use vim-like keys for splits and windows
#  bind-key v split-window -h -c "#{pane_current_path}"
#  bind-key s split-window -v -c "#{pane_current_path}"
#  bind-key h select-pane -L
#  bind-key j select-pane -D
#  bind-key k select-pane -U
#  bind-key l select-pane -R

## smart pane switching with awareness of vim splits
#  is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
#  bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
#  bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
#  bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
#  bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
#  bind -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
#  bind C-L send-keys 'C-l'
#  bind-key C-o rotate-window
#  bind-key + select-layout main-horizontal
#  bind-key = select-layout main-vertical
#  set-window-option -g other-pane-height 10
#  set-window-option -g other-pane-width 90
#  bind-key a last-pane
#  bind-key q display-panes
#  bind-key c new-window -c "#{pane_current_path}"
#  bind-key t next-window
#  bind-key T previous-window
#  bind-key [ copy-mode
#  bind-key ] paste-buffer

## Setup 'v' to begin selection as in Vim
#  bind-key -Tcopy-mode-vi 'v' send -X begin-selection
#  bind-key -Tcopy-mode-vi 'y' send -X copy-selection-and-cancel
## Update default binding of `Enter` to also use copy-pipe
#  bind-key -Tcopy-mode-vi Enter send -X copy-selection-and-cancel


## # Setup 'v' to begin selection as in Vim
##   bind-key -t vi-copy v begin-selection
##   bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
## # Update default binding of `Enter` to also use copy-pipe
##   unbind -t vi-copy Enter
##   bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

#  set-window-option -g display-panes-time 1500

## Enable native Mac OS X copy/paste
#  # set-option -g default-command "reattach-to-user-namespace -l $SHELL"
## set-option -g default-command "/usr/local/bin/zsh -c 'which reattach-to-user-namespace >/dev/null && exec reattach-to-user-namespace $SHELL -l || exec $SHELL -l'"

## Allow the arrow key to be used immediately after changing windows
#  set-option -g repeat-time 0

#  # set -g @continuum-restore 'off'


###====== START THE STATUS BAR =============#
# source-file $HOME/.config/tmux/tmux-status.conf
### List of plugins
##  set -g monitor-activity on
### Supports `github_username/repo` or full git repo URLs
##  set-environment -g TMUX_PLUGIN_MANAGER_PATH '$HOME/.config/tmux/plugins/'
# set -g @tpm_plugins '             \
# tmux-plugins/tpm                  \
# tmux-plugins/tmux-battery         \
# tmux-plugins/tmux-cpu             \
# tmux-plugins/tmux-yank            \
#'
#  # Other examples:
#  # github_username/plugin_name    \
#  # git@github.com/user/plugin     \
#  # git@bitbucket.com/user/plugin  \

#  # Initializes TMUX plugin manager.
#  # Keep this line at the very bottom of tmux.conf.
#  run-shell $HOME/.config/tmux/plugins/tpm/tpm
